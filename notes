{{ @type.instance_vars }}.each do |x|
        case x
        when Array(T)
          puts "array"

          x.each do |t|
            puts t
            puts typeof(t)
          end

        when String
          puts "string"
        when UInt16
          puts "uint16"
        when UInt8
          puts "uint8"
        end
      end

      macro field(type, subType = 0)
      
      @{{ type.var }} : {{ type.type }} = {{ type.value }}

      def {{ type.var }}= (v)
        @{{ type.var }} = v
      end

      def pack_{{ type.var }}
        {% if type.type.resolve == UInt8 ||
          type.type.resolve == UInt16 || 
          type.type.resolve == UInt32 ||
          type.type.resolve == UInt64 %}
          @io.write_bytes(@{{ type.var }}, IO::ByteFormat::BigEndian)
        {% end %}

        {% if type.type.resolve == String %}
          @io.write_bytes(@{{ type.var }}.size.to_i16, IO::ByteFormat::BigEndian)
          @io << @{{ type.var }}
        {% end %}

        {% if type.type.resolve == Bytes %}
          @io.write_bytes(@{{ type.var }}.size.to_i16, IO::ByteFormat::BigEndian)
          @io << String.new(@{{ type.var }})
        {% end %}
      
        {% if !type.type.resolve.annotation(AvocadoItem).nil? %}
          puts {{ type.type.resolve.annotation(AvocadoItem)[:type] }}
        {% end %}

        {% if type.type.resolve >= Array.resolve %}
          puts "test"
        {% end %}
      end
       
    end